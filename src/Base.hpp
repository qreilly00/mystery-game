#ifndef BASE_HPP
#define BASE_HPP

#include "../inc/common.hpp"

#include "BasicUtils.hpp"
#include "Entity.hpp"
#include "MapUtils.hpp"
#include "HudUtils.hpp"

class Base {
private:

    // Saves the amount of time generated by the timeUtil.
    BasicUtils ut;
    float totalTime;

    MapUtils mu;
    HudUtils hu;

    sf::RenderWindow window;
    sf::View view;

    Entity player;
    sf::Vector2f playerMoveAmount;

    int currentLevel;
    int currentStage;

    bool buildMode;

    std::vector<LevelShape> collides;
    std::vector<LevelShape> objects;

    std::vector<LevelShape> rooms;
    std::vector<LevelShape> corridors;
    std::vector<LevelShape> roomWalls;
    std::vector<LevelShape> corridorWalls;

public:
    Base();

    // Init Functions.
    void createWindow() {window.create(sf::VideoMode(sf::VideoMode::getDesktopMode().width, sf::VideoMode::getDesktopMode().height), "SFML works!"/*, sf::Style::Fullscreen*/);}

    // Main Functions.
    bool gameLoop();

    // Required by gameLoop.
    void drawWindow();
    bool checkControls();
    void fadeForeGround();

    float calculateFrameStep() {return (player.getSpeed() * player.getSpeedMultiplier()) * totalTime;}
};

#endif
